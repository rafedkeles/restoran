using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Npgsql;

namespace restauran
{
    public partial class Form1 : Form
    {
        private List<string> tables = new List<string>
        {
            "musteriler", "yemektarifleri", "bakim", "odeme", "menu",
             "urunler", "calisanlar", "siparis", "fatura",
            "etkinlikler", "calisantakvim", "yetkililer", "kampanyalar",
            "sikayetler", "tedarikciler", "rezervasyon", "masa", "depo"
        };

        public Form1()
        {
            InitializeComponent();
            this.WindowState = FormWindowState.Maximized; 
            CreateTableButtons();
        }

        private void CreateTableButtons()
        {
            int buttonWidth = 200;
            int buttonHeight = 50;
            int padding = 20;
            int xStart = padding;
            int yStart = padding;

            int x = xStart;
            int y = yStart;

            foreach (var table in tables)
            {
                Button button = new Button
                {
                    Text = table,
                    Size = new Size(buttonWidth, buttonHeight),
                    Location = new Point(x, y),
                    Font = new Font("Arial", 12, FontStyle.Bold),
                    BackColor = Color.LightBlue
                };
                button.Click += (sender, e) => OpenTableWindow(table);
                this.Controls.Add(button);

                x += buttonWidth + padding;
                if (x + buttonWidth > this.ClientSize.Width - padding)
                {
                    x = xStart;
                    y += buttonHeight + padding;
                }
            }
        }

        private void OpenTableWindow(string tableName)
        {
            TableWindow tableWindow = new TableWindow(tableName);
            tableWindow.Show();
        }
    }

    public class TableWindow : Form
    {
        private string tableName;
        private DataGridView dataGridView;
        private TextBox searchTextBox;

        public TableWindow(string tableName)
        {
            this.tableName = tableName;
            this.Text = $"Table: {tableName}";
            this.WindowState = FormWindowState.Maximized;

            InitializeComponents();
            LoadTableData();
        }

        private void InitializeComponents()
        {
            dataGridView = new DataGridView
            {
                Dock = DockStyle.Fill,
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill
            };

           
            DataGridViewCheckBoxColumn checkBoxColumn = new DataGridViewCheckBoxColumn
            {
                HeaderText = "Select",
                Name = "Select",
                Width = 50
            };
            dataGridView.Columns.Add(checkBoxColumn);

            this.Controls.Add(dataGridView);
            Panel buttonPanel = new Panel
            {
                Dock = DockStyle.Top,
                Height = 50,
                BackColor = Color.LightGray
            };

            
            Button addButton = new Button
            {
                Text = "Add",
                Size = new Size(80, 30),
                Location = new Point(10, 10)
            };
            addButton.Click += (sender, e) => OpenAddRecordForm();
            Button updateButton = new Button
            {
                Text = "Update",
                Size = new Size(80, 30),
                Location = new Point(100, 10)
            };
            updateButton.Click += (sender, e) => UpdateSelectedRows();

            
            Button deleteButton = new Button
            {
                Text = "Delete",
                Size = new Size(80, 30),
                Location = new Point(190, 10)
            };
            deleteButton.Click += (sender, e) => DeleteSelectedRows();

            
            Label searchLabel = new Label
            {
                Text = "Search by ID:",
                AutoSize = true,
                Location = new Point(280, 15)
            };

            
            searchTextBox = new TextBox
            {
                Location = new Point(370, 10),
                Width = 100
            };

            
            Button searchButton = new Button
            {
                Text = "Search",
                Size = new Size(80, 30),
                Location = new Point(480, 10)
            };
            searchButton.Click += (sender, e) => SearchByID();

            
            buttonPanel.Controls.Add(addButton);
            buttonPanel.Controls.Add(updateButton);
            buttonPanel.Controls.Add(deleteButton);
            buttonPanel.Controls.Add(searchLabel);
            buttonPanel.Controls.Add(searchTextBox);
            buttonPanel.Controls.Add(searchButton);

            this.Controls.Add(buttonPanel);
        }

        private void LoadTableData()
        {
            try
            {
                string connectionString = "Host=localhost;Username=postgres;Password=123456;Database=restoran";
                using (var connection = new NpgsqlConnection(connectionString))
                {
                    connection.Open();
                    string query = $"SELECT * FROM {tableName}";
                    var adapter = new NpgsqlDataAdapter(query, connection);
                    var dataTable = new DataTable();
                    adapter.Fill(dataTable);
                    dataGridView.DataSource = dataTable;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading table {tableName}: {ex.Message}");
            }
        }
        private void SearchByID()
        {
            if (string.IsNullOrWhiteSpace(searchTextBox.Text))
            {
                MessageBox.Show("الرجاء إدخال قيمة الـID للبحث.");
                return;
            }
            if (!int.TryParse(searchTextBox.Text, out int idValue))
            {
                MessageBox.Show("الرجاء إدخال رقم صحيح للـID.");
                return;
            }

            try
            {
                string connectionString = "Host=localhost;Username=postgres;Password=123456;Database=restoran";
                using (var connection = new NpgsqlConnection(connectionString))
                {
                    connection.Open();

                    
                    string primaryKeyColumn = GetPrimaryKeyColumn(connection, tableName);
                    if (primaryKeyColumn == null)
                    {
                        MessageBox.Show("Primary key column not found!");
                        return;
                    }

                    
                    string query = $"SELECT * FROM {tableName} WHERE {primaryKeyColumn} = @id";
                    using (var command = new NpgsqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@id", idValue);
                        var adapter = new NpgsqlDataAdapter(command);
                        var dataTable = new DataTable();
                        adapter.Fill(dataTable);

                        dataGridView.DataSource = dataTable;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"hata: {ex.Message}");
            }
        }

       
        private string GetPrimaryKeyColumn(NpgsqlConnection connection, string tableName)
        {
            string query = $@"
                SELECT kcu.column_name
                FROM information_schema.table_constraints AS tc
                JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
                WHERE tc.table_name = '{tableName}' AND tc.constraint_type = 'PRIMARY KEY'
            ";

            using (var command = new NpgsqlCommand(query, connection))
            using (var reader = command.ExecuteReader())
            {
                if (reader.Read())
                {
                    return reader.GetString(0);
                }
            }

            return null;
        }

        private void OpenAddRecordForm()
        {
            AddRecordForm addRecordForm = new AddRecordForm(tableName);
            if (addRecordForm.ShowDialog() == DialogResult.OK)
            {
                LoadTableData();
            }
        }

        private void UpdateSelectedRows()
        {
            foreach (DataGridViewRow row in dataGridView.Rows)
            {
                if (Convert.ToBoolean(row.Cells["Select"].Value) == true)
                {
                    int id = Convert.ToInt32(row.Cells[1].Value);
                    EditRecordForm editRecordForm = new EditRecordForm(tableName, id);
                    if (editRecordForm.ShowDialog() == DialogResult.OK)
                    {
                        LoadTableData(); 
                    }
                }
            }
        }

        private void DeleteSelectedRows()
        {
            try
            {
                string connectionString = "Host=localhost;Username=postgres;Password=123456;Database=restoran";
                using (var connection = new NpgsqlConnection(connectionString))
                {
                    connection.Open();

                    string primaryKeyQuery = $@"
                        SELECT 
                            kcu.column_name
                        FROM 
                            information_schema.table_constraints AS tc
                        JOIN 
                            information_schema.key_column_usage AS kcu
                        ON 
                            tc.constraint_name = kcu.constraint_name
                        WHERE 
                            tc.table_name = '{tableName}' AND tc.constraint_type = 'PRIMARY KEY';";

                    string primaryKeyColumn = null;
                    using (var command = new NpgsqlCommand(primaryKeyQuery, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            primaryKeyColumn = reader.GetString(0);
                        }
                    }

                    if (primaryKeyColumn == null)
                    {
                        MessageBox.Show("Primary key column not found!");
                        return;
                    }

                    foreach (DataGridViewRow row in dataGridView.Rows)
                    {
                        if (Convert.ToBoolean(row.Cells["Select"].Value) == true)
                        {
                            int id = Convert.ToInt32(row.Cells[primaryKeyColumn].Value);

                            string query = $"DELETE FROM {tableName} WHERE {primaryKeyColumn} = @id";
                            using (var deleteCommand = new NpgsqlCommand(query, connection))
                            {
                                deleteCommand.Parameters.AddWithValue("@id", id);
                                deleteCommand.ExecuteNonQuery();
                            }
                        }
                    }
                }

                MessageBox.Show("Selected rows deleted successfully.");
                LoadTableData(); 
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error deleting rows: {ex.Message}");
            }
        }
    }

    public class AddRecordForm : Form
    {
        private string tableName;
        private Dictionary<string, Control> controls = new Dictionary<string, Control>();

        public AddRecordForm(string tableName)
        {
            this.tableName = tableName;
            this.Text = $"Add Record to {tableName}";
            this.Size = new Size(400, 600);

            InitializeComponents();
        }

        private void InitializeComponents()
        {
            string connectionString = "Host=localhost;Username=postgres;Password=123456;Database=restoran";
            using (var connection = new NpgsqlConnection(connectionString))
            {
                connection.Open();

                string columnQuery = $@"
                    SELECT column_name, data_type
                    FROM information_schema.columns
                    WHERE table_name = '{tableName}'";

                using (var command = new NpgsqlCommand(columnQuery, connection))
                using (var reader = command.ExecuteReader())
                {
                    int y = 20;

                    while (reader.Read())
                    {
                        string columnName = reader.GetString(0);
                        string dataType = reader.GetString(1);

                        Label label = new Label
                        {
                            Text = columnName,
                            Location = new Point(20, y),
                            AutoSize = true
                        };
                        this.Controls.Add(label);

                        Control control;
                        if (dataType == "integer" || dataType == "bigint")
                        {
                            control = new TextBox { Location = new Point(150, y), Width = 200 };
                        }
                        else if (dataType == "date")
                        {
                            control = new DateTimePicker { Location = new Point(150, y), Width = 200 };
                        }
                        else
                        {
                            control = new TextBox { Location = new Point(150, y), Width = 200 };
                        }

                        controls.Add(columnName, control);
                        this.Controls.Add(control);

                        y += 30;
                    }
                }
            }

            Button saveButton = new Button
            {
                Text = "Save",
                Location = new Point(150, 500),
                Width = 100
            };
            saveButton.Click += SaveButton_Click;

            this.Controls.Add(saveButton);
        }

        private void SaveButton_Click(object sender, EventArgs e)
        {
            try
            {
                string connectionString = "Host=localhost;Username=postgres;Password=123456;Database=restoran";
                using (var connection = new NpgsqlConnection(connectionString))
                {
                    connection.Open();

                    string columns = string.Join(", ", controls.Keys);
                    string values = string.Join(", ", controls.Keys.Select(k => $"@{k}"));
                    string query = $"INSERT INTO {tableName} ({columns}) VALUES ({values})";

                    using (var command = new NpgsqlCommand(query, connection))
                    {
                        foreach (var kvp in controls)
                        {
                            string columnName = kvp.Key;
                            Control control = kvp.Value;

                            if (control is TextBox textBox)
                            {
                                
                                if (int.TryParse(textBox.Text, out int intValue))
                                    command.Parameters.AddWithValue($"@{columnName}", intValue);
                                else if (decimal.TryParse(textBox.Text, out decimal decimalValue))
                                    command.Parameters.AddWithValue($"@{columnName}", decimalValue);
                                else
                                    command.Parameters.AddWithValue($"@{columnName}", textBox.Text);
                            }
                            else if (control is DateTimePicker datePicker)
                            {
                                command.Parameters.AddWithValue($"@{columnName}", datePicker.Value);
                            }
                        }

                        command.ExecuteNonQuery();
                    }
                }

                MessageBox.Show("Record added successfully!");
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error adding record: {ex.Message}");
            }
        }
    }

    public class EditRecordForm : Form
    {
        private string tableName;
        private int recordId;
        private Dictionary<string, Control> controls = new Dictionary<string, Control>();

        public EditRecordForm(string tableName, int recordId)
        {
            this.tableName = tableName;
            this.recordId = recordId;
            this.Text = $"Edit Record in {tableName}";
            this.Size = new Size(400, 600);

            InitializeComponents();
        }

        private void InitializeComponents()
        {
            string connectionString = "Host=localhost;Username=postgres;Password=123456;Database=restoran";
            using (var connection = new NpgsqlConnection(connectionString))
            {
                connection.Open();

                string columnQuery = $@"
                    SELECT column_name, data_type
                    FROM information_schema.columns
                    WHERE table_name = '{tableName}'";

                using (var command = new NpgsqlCommand(columnQuery, connection))
                using (var reader = command.ExecuteReader())
                {
                    int y = 20;

                    while (reader.Read())
                    {
                        string columnName = reader.GetString(0);
                        string dataType = reader.GetString(1);

                        Label label = new Label
                        {
                            Text = columnName,
                            Location = new Point(20, y),
                            AutoSize = true
                        };
                        this.Controls.Add(label);

                        Control control;

                        if (dataType == "integer" || dataType == "bigint")
                        {
                            control = new TextBox { Location = new Point(150, y), Width = 200 };
                        }
                        else if (dataType == "date")
                        {
                            control = new DateTimePicker { Location = new Point(150, y), Width = 200 };
                        }
                        else
                        {
                            control = new TextBox { Location = new Point(150, y), Width = 200 };
                        }

                        controls.Add(columnName, control);
                        this.Controls.Add(control);

                        y += 30;
                    }
                }

                
                string fetchQuery = $"SELECT * FROM {tableName} WHERE {GetPrimaryKeyColumn(connection)} = @id";
                using (var fetchCommand = new NpgsqlCommand(fetchQuery, connection))
                {
                    fetchCommand.Parameters.AddWithValue("@id", recordId);

                    using (var reader = fetchCommand.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            foreach (var column in controls.Keys)
                            {
                                var control = controls[column];
                                var value = reader[column];

                                if (control is TextBox textBox)
                                {
                                    textBox.Text = value?.ToString();
                                }
                                else if (control is DateTimePicker datePicker && value is DateTime dateValue)
                                {
                                    datePicker.Value = dateValue;
                                }
                            }
                        }
                    }
                }
            }

            Button saveButton = new Button
            {
                Text = "Save",
                Location = new Point(150, 500),
                Width = 100
            };
            saveButton.Click += SaveButton_Click;

            this.Controls.Add(saveButton);
        }

        private string GetPrimaryKeyColumn(NpgsqlConnection connection)
        {
            string query = $@"
                SELECT kcu.column_name
                FROM information_schema.table_constraints AS tc
                JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
                WHERE tc.table_name = '{tableName}' AND tc.constraint_type = 'PRIMARY KEY'
            ";

            using (var command = new NpgsqlCommand(query, connection))
            using (var reader = command.ExecuteReader())
            {
                if (reader.Read())
                {
                    return reader.GetString(0);
                }
            }

            throw new Exception("Primary key column not found.");
        }

        private void SaveButton_Click(object sender, EventArgs e)
        {
            try
            {
                string connectionString = "Host=localhost;Username=postgres;Password=123456;Database=restoran";
                using (var connection = new NpgsqlConnection(connectionString))
                {
                    connection.Open();

                    string primaryKeyColumn = GetPrimaryKeyColumn(connection);
                    string updateQuery = $@"
                        UPDATE {tableName}
                        SET {string.Join(", ", controls.Keys.Select(k => $"{k} = @{k}"))}
                        WHERE {primaryKeyColumn} = @id";

                    using (var updateCommand = new NpgsqlCommand(updateQuery, connection))
                    {
                        foreach (var kvp in controls)
                        {
                            string columnName = kvp.Key;
                            Control control = kvp.Value;

                            if (control is TextBox textBox)
                            {
                                
                                if (int.TryParse(textBox.Text, out int intValue))
                                    updateCommand.Parameters.AddWithValue($"@{columnName}", intValue);
                                else if (decimal.TryParse(textBox.Text, out decimal decimalValue))
                                    updateCommand.Parameters.AddWithValue($"@{columnName}", decimalValue);
                                else
                                    updateCommand.Parameters.AddWithValue($"@{columnName}", textBox.Text);
                            }
                            else if (control is DateTimePicker datePicker)
                            {
                                updateCommand.Parameters.AddWithValue($"@{columnName}", datePicker.Value);
                            }
                        }

                        updateCommand.Parameters.AddWithValue("@id", recordId);
                        updateCommand.ExecuteNonQuery();
                    }
                }

                MessageBox.Show("Record updated successfully!");
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error updating record: {ex.Message}");
            }
        }
    }
}
